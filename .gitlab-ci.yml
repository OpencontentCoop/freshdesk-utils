image: docker:latest

# build -> push -> delivery
stages:
    - build
    - push
    - delivery

variables:
    CONTAINER_TMP_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA" 	        # ...:adbcdefg01234
    AWS_REGISTRY: "AWS_ACCOUNT_ID."
    AWS_ECR_IMAGE: "$AWS_REGISTRY/$CI_PROJECT_NAME" 	                # :registry/:gitlab-project-name
    FARGATE_DOMAIN: "fargate.opencontent.io"
    LB: fargate-lb
    PORT: http:3000
    NETWORKING: "--security-group-id sg-09623de76fa990898 --subnet-id subnet-0b05fd8af8e3414bf --subnet-id subnet-07a1e55f83f380f87 --subnet-id subnet-0fe7f82bfcc0200b3"

services:
  - docker:dind

common_build:
    stage: build
    before_script:
      - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    script:
        - docker pull  $CONTAINER_TMP_IMAGE 2> /dev/null || docker build --pull -t $CONTAINER_TMP_IMAGE . #Build docker image
        - docker push  $CONTAINER_TMP_IMAGE
    only:
      - branches
      - tags

push_branches:
    stage: push
    before_script:
      - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    script:
        - docker pull $CONTAINER_TMP_IMAGE
        - docker tag $CONTAINER_TMP_IMAGE "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"      # ...:branch-name
        - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
    only:
        - branches
    except:
        - master

push_tags:
    stage: push
    before_script:
      - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    script:
        - docker pull $CONTAINER_TMP_IMAGE
        - docker tag $CONTAINER_TMP_IMAGE "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
        - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    only:
        - tags


push_latest:
    stage: push
    before_script:
      - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    script:
        - docker pull $CONTAINER_TMP_IMAGE
        - docker tag $CONTAINER_TMP_IMAGE "$CI_REGISTRY_IMAGE:latest"
        - docker push "$CI_REGISTRY_IMAGE:latest"
    only:
        - master

push_branches_to_ecr:
    stage: push
    before_script:
      - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      - apk add --no-cache python py-pip
      - pip install awscli
      - $(aws ecr get-login --no-include-email | sed 's|https://||')
      - aws ecr describe-repositories --repository-names $CI_PROJECT_NAME 2> /dev/null || aws ecr create-repository --repository-name $CI_PROJECT_NAME
    script:
        - docker pull $CONTAINER_TMP_IMAGE
        - docker tag $CONTAINER_TMP_IMAGE "$AWS_ECR_IMAGE:$CI_COMMIT_REF_NAME"  # ...:branch-name
        - docker push "$AWS_ECR_IMAGE:$CI_COMMIT_REF_NAME"      # ...:branch-name
    only:
        - branches
    except:
        - master

push_tags_to_ecr:
    stage: push
    before_script:
      - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      - apk add --no-cache python py-pip
      - pip install awscli
      - $(aws ecr get-login --no-include-email | sed 's|https://||')
      - aws ecr describe-repositories --repository-names $CI_PROJECT_NAME 2> /dev/null || aws ecr create-repository --repository-name $CI_PROJECT_NAME
    script:
        - docker pull $CONTAINER_TMP_IMAGE
        - docker tag $CONTAINER_TMP_IMAGE "$AWS_ECR_IMAGE:$CI_COMMIT_TAG"
        - docker push "$AWS_ECR_IMAGE:$CI_COMMIT_TAG"
    only:
        - tags

push_latest_to_ecr:
    stage: push
    before_script:
      - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      - apk add --no-cache python py-pip
      - pip install awscli
      - $(aws ecr get-login --no-include-email | sed 's|https://||')
      - aws ecr describe-repositories --repository-names $CI_PROJECT_NAME 2> /dev/null || aws ecr create-repository --repository-name $CI_PROJECT_NAME
    script:
        - docker pull $CONTAINER_TMP_IMAGE
        - docker tag $CONTAINER_TMP_IMAGE "$AWS_ECR_IMAGE:latest"
        - docker push "$AWS_ECR_IMAGE:latest"
    only:
        - master


